-- -*- lua -*-

local oo    = require("oo")
local types = require("types")
local log   = require("log")
local event = require("event")

function mkpipe()
	local lines  = types.List.new()
	local buffer = ""
	local eof    = false
	local r = {
		close =
			function(self)
			end,
		read =
			function(self, format)
				while lines:empty() do
					if eof then
						return nil
					end
					coroutine.yield("read_blocked")
				end
				return lines:pop_front()
			end,
		lines =
			function(self)
				return function() return self:read() end
			end,
	}
	local w = {
		close =
			function(self)
				if buffer ~= "" then
					lines:push_back(buffer)
				end
				eof = true
			end,
		flush =
			function(self)
			end,
		write =
			function(self, text)
				buffer = buffer..text
				while true do
					local nl = string.find(buffer, "\n")
					if nl then
						lines:push_back(string.sub(buffer, 1, nl-1))
						buffer = string.sub(buffer, nl+1)
					else
						return
					end
				end
			end,
	}
	--seek = -- not supported in CC
	--	function(self, whence, offset)
	--		end,
	--setvbuf = -- not supported in CC
	--	function(self, mode, size)
	--	end,
	return r, w
end


local Pipe = oo.class("Pipe")

function Pipe.new(cmd, self, klass)
    self = self or {}
    Pipe.super.new(self, klass or Pipe)
    self:_parse(cmd)
    return self
end

function Pipe._parse(self, cmd)
	print("parse ["..cmd.."]")
	self._parts = types.List.new()
	for p in string.gmatch(cmd, "([^%|]+)%|?") do
		print("... ["..p.."]")
		self._parts:push_back({
					        cmd=p,
					        co=coroutine.create(function() shell.run(p) end),
					    })
	end
	self._parts:front().input = io.input()
	self._parts:back().output = io.output()
	local prev
	for v in self._parts:iterator() do
		if prev then
			v.input, prev.output = mkpipe()
		end
		prev = v
	end
end

function Pipe._run(self, v, ...)
	io.input(v.input)
	io.output(v.output)
	log.debug("-------")
	log.debug("resuming "..v.cmd)
	local r = { coroutine.resume(v.co, ...) }
	if coroutine.status(v.co) == "dead" then
		v.output.close()
	end
	for i,v in ipairs(r) do
		log.debug("R "..tostring(i).." : "..tostring(v))
	end
	log.debug("status="..tostring(coroutine.status(v.co)))
end

function Pipe.run(self)
	for v in self._parts:iterator() do
		self:_run(v)
	end

	while true do
		local done = true
		for v in self._parts:iterator() do
			if coroutine.status(v.co) ~= "dead" then
				done = false
				break
			end
		end
		if done then
			break
		end
		local ev = { event.pull() }
		for v in self._parts:iterator() do
			if coroutine.status(v.co) ~= "dead" then
				self:_run(v, unpack(ev))
			end
		end
	end

	io.input(self._parts:front().input)
	io.output(self._parts:back().output)
end

function try(cmd)
	local p = Pipe.new(cmd)
	p:run()
end

--try("cat startup")
--try("cat usr/startup")
--try("cat startup | cat usr/startup")
--try("cat usr/startup | cat startup")
--try("cat usr/startup | ping srv")
try("cat usr/startup | more")
--try("cat startup | cat")

if false then
	io.write("USING io.write")
	local l = io.read("*l")
	print("l=["..tostring(l).."]")
end
print("done")
