-- -*- lua -*-

local cl = require("cl")

--[[

	Slightly improved copy command.

	The key feature is the "-f" flag to force overwriting of existing files
	(needed by startup to update an existing installation on boot).

]]

local args = {...}
local opt = cl.Options.new({
        f = {
            name = "force",
            help = "Allow overwriting of files",
        },
        n = {
        	name = "dryrun",
        	help = "Show operations to be performed without actually doing them",
    	},
        r = {
        	name = "recursive",
        	help = "Recurse into subdirectories",
    	},
    })

opt:set(args)

if opt:get("help") or #args < 2 then
	print("Usage: cp <src>... <dst>")
    opt:usage()
    return
end

local function cp(src, dst)
	--print("cp("..src..","..dst..")")
	if fs.exists(dst) and fs.isDir(dst) then
		dst = fs.combine(dst, fs.getName(src))
	end
	if fs.exists(src) and fs.isDir(src) then
		if fs.exists(dst) and not fs.isDir(dst) then
			error(dst.." is not a directory")
		end
		if not fs.exists(dst) and not opt:get("dryrun") then
			fs.makeDir(dst)
		end
		if opt:get("recursive") then
			for i,entry in ipairs(fs.list(src)) do
				cp(fs.combine(src, entry), dst)
			end
		else
			error(src.." is a directory")
		end
	else
		if opt:get("dryrun") then
			print("cp "..src.." "..dst)
		else
			if fs.exists(dst) then
				if opt:get("force") then
					fs.delete(dst)
				else
					error(dst.." exists")
				end
			end
			fs.copy(src, dst)
		end
	end
end

local dst = shell.resolve(table.remove(args))
for i,src in ipairs(args) do
	cp(shell.resolve(src), dst)
end
